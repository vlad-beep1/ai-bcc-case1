from __future__ import annotations
from typing import List, Optional, Dict, Any
import unicodedata, hashlib, random
from .llm import rewrite_push_tov, rewrite_why_tov

def nfc(s:str)->str: return unicodedata.normalize("NFC", s or "")

EXCEPT_FEMALE = {"–ê–π–≥–µ—Ä–∏–º","–ö–∞–º–∏–ª–ª–∞","–°–∞–±–∏–Ω–∞","–ö–∞—Ä–∏–Ω–∞","–ñ–∞–Ω–∞—Ä","–ê–ª–∏–Ω–∞","–ù—É—Ä–∏—è","–ñ–∞–Ω–µ–ª—å","–ú–∞—Ä–∂–∞–Ω",
                 "–ê—è–∂–∞–Ω","–ê—Ä—É–∂–∞–Ω","–ì—É–ª—å–º–∏—Ä–∞","–ú–∞—Ä–∏–Ω–∞","–û–ª—å–≥–∞","–ò—Ä–∏–Ω–∞","–Æ–ª–∏—è","–î–∞—Ä—å—è","–ï–ª–µ–Ω–∞",
                 "–í–∏–∫—Ç–æ—Ä–∏—è","–ñ–∞–Ω–∏—è","–ê–ª–∏—è","–î–∏–∞–Ω–∞","–ù–∞–¥–µ–∂–¥–∞","–û–∫—Å–∞–Ω–∞","–õ–∞—É—Ä–∞","–î–∏–ª—å–Ω–∞–∑","–ê–π—à–∞"}

def infer_gender(name: str) -> str:
    n = nfc(name)
    if n in EXCEPT_FEMALE or n.endswith(("–∞","—è")): return "F"
    return "M"

def salutation(name:str, gender:Optional[str]=None)->str:
    g = (gender or "").upper() or infer_gender(name)
    return f"–£–≤–∞–∂–∞–µ–º–∞—è {name}" if g == "F" else f"–£–≤–∞–∂–∞–µ–º—ã–π {name}"

def fmt_kzt(v:int)->str:
    s = f"{int(max(0,v)):,}".replace(",", " ")
    return f"{s} ‚Ç∏"

TEMPLATES = {
    "–ö–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π": [
        "{who}, –ø–æ –≤–∞—à–∏–º –ø–æ–µ–∑–¥–∫–∞–º –∏ —Ç–∞–∫—Å–∏ ‚Äî {diag}. –í–µ—Ä–Ω—ë—Ç—Å—è –¥–æ {b} –µ–∂–µ–º–µ—Å—è—á–Ω–æ{emo}. –û—Ñ–æ—Ä–º–∏—Ç–µ –∫–∞—Ä—Ç—É.",
        "{who}, —á–∞—Å—Ç–æ –≤ –¥–æ—Ä–æ–≥–µ: {diag}. –î–æ {b} –∫–µ—à–±—ç–∫–∞ –≤ –º–µ—Å—è—Ü{emo}. –û—Ñ–æ—Ä–º–∏—Ç—å –∫–∞—Ä—Ç—É –∑–∞ –ø–∞—Ä—É –º–∏–Ω—É—Ç.",
        "{who}, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∏ —Ç–∞–∫—Å–∏ –∞–∫—Ç–∏–≤–Ω—ã ‚Äî {diag}. –î–æ {b} –≤ –º–µ—Å—è—Ü{emo}. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–∞—Ä—Ç—É.",
    ],
    "–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞": [
        "{who}, –∫—Ä—É–ø–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –∏ —á–∞—Å—Ç—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã {city}. –ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –¥–∞—Å—Ç –¥–æ {b} –≤ –º–µ—Å—è—Ü –∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–Ω—è—Ç–∏—è. –û—Ñ–æ—Ä–º–∏—Ç–µ —Å–µ–π—á–∞—Å.",
        "{who}, –≤–∞—à —É—Ä–æ–≤–µ–Ω—å —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ–¥—Ö–æ–¥—è—Ç –ø–æ–¥ –ø—Ä–µ–º–∏—É–º. –î–æ {b} –µ–∂–µ–º–µ—Å—è—á–Ω–æ + –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏. –û—Ñ–æ—Ä–º–∏—Ç–µ –∫–∞—Ä—Ç—É.",
    ],
    "–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞": [
        "{who}, —Ç–æ–ø-–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî {cats}. –ö–∞—Ä—Ç–∞ –≤–µ—Ä–Ω—ë—Ç –¥–æ {b} –µ–∂–µ–º–µ—Å—è—á–Ω–æ –∏ –¥–∞—Å—Ç —Ä–∞—Å—Å—Ä–æ—á–∫—É. –û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ä—Ç—É.",
        "{who}, –≤—ã —á–∞—â–µ —Ç—Ä–∞—Ç–∏—Ç–µ –Ω–∞ {cats}. –î–æ {b} –∫–µ—à–±—ç–∫–∞ –≤ –º–µ—Å—è—Ü + —Ä–∞—Å—Å—Ä–æ—á–∫–∞. –û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ä—Ç—É.",
        "{who}, –ª—é–±–∏–º—ã–µ –ø–æ–∫—É–ø–∫–∏: {cats}. –î–æ {b} –≤ –º–µ—Å—è—Ü –∏ —É–¥–æ–±–Ω–∞—è —Ä–∞—Å—Å—Ä–æ—á–∫–∞. –û—Ñ–æ—Ä–º–∏—Ç–µ –∫–∞—Ä—Ç—É.",
    ],
    "–û–±–º–µ–Ω –≤–∞–ª—é—Ç": [
        "{who}, —á–∞—Å—Ç–æ –ø–ª–∞—Ç–∏—Ç–µ –≤ –≤–∞–ª—é—Ç–µ. –í—ã–≥–æ–¥–Ω—ã–π –∫—É—Ä—Å –∏ –∞–≤—Ç–æ-–ø–æ–∫—É–ø–∫–∞ –ø–æ —Ü–µ–ª–µ–≤–æ–º—É ‚Äî —É–¥–æ–±–Ω–æ. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ–±–º–µ–Ω.",
        "{who}, –≤–∞–ª—é—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –º–Ω–æ–≥–æ. –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ —Ü–µ–ª–µ–≤–æ–π –∫—É—Ä—Å, –º–µ–Ω—è–π—Ç–µ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∫–æ–º–∏—Å—Å–∏–π. –í–∫–ª—é—á–∏—Ç–µ –æ–±–º–µ–Ω.",
    ],
    "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏": [
        "{who}, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–π –Ω–∞ —Å—Ç–∞—Ä—Ç–µ ‚Äî –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–æ {b} –≤ –º–µ—Å—è—Ü{emo}. –û—Ç–∫—Ä–æ–π—Ç–µ —Å—á—ë—Ç.",
        "{who}, —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –º–æ–∂–Ω–æ –≤–ª–æ–∂–∏—Ç—å ‚Äî –¥–æ {b} –µ–∂–µ–º–µ—Å—è—á–Ω–æ{emo}. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–æ–∫–µ—Ä—Å–∫–∏–π —Å—á—ë—Ç.",
    ],
    "–ö—Ä–µ–¥–∏—Ç –Ω–∞–ª–∏—á–Ω—ã–º–∏": [
        "{who}, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –∑–∞–ø–∞—Å –Ω–∞ –∫—Ä—É–ø–Ω—ã–µ —Ç—Ä–∞—Ç—ã ‚Äî –∫—Ä–µ–¥–∏—Ç —Å –≥–∏–±–∫–∏–º–∏ –≤—ã–ø–ª–∞—Ç–∞–º–∏. –£–∑–Ω–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–π –ª–∏–º–∏—Ç.",
        "{who}, –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ–∫—É–ø–∫—É? –ü–æ–¥–æ–π–¥—ë—Ç –∫—Ä–µ–¥–∏—Ç –Ω–∞–ª–∏—á–Ω—ã–º–∏ —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏. –£–∑–Ω–∞–π—Ç–µ –ª–∏–º–∏—Ç.",
    ],
    "–î–µ–ø–æ–∑–∏—Ç": [
        "{who}, —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ ‚âà {diag}. –í–∫–ª–∞–¥ –ø—Ä–∏–Ω–µ—Å—ë—Ç –¥–æ {b} –≤ –º–µ—Å—è—Ü. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∫–ª–∞–¥.",
        "{who}, –¥–µ—Ä–∂–∏—Ç–µ –ø–æ–¥—É—à–∫—É –Ω–∞ –≤–∫–ª–∞–¥–µ ‚Äî –¥–æ {b} –µ–∂–µ–º–µ—Å—è—á–Ω–æ. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∫–ª–∞–¥.",
    ],
}

def choose_template(product: str, seed: int) -> str:
    key = product if product in TEMPLATES else ("–î–µ–ø–æ–∑–∏—Ç" if product.startswith("–î–µ–ø–æ–∑–∏—Ç") else "–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞")
    arr = TEMPLATES[key][:]
    random.Random(seed).shuffle(arr)
    return arr[0]

def pick_emoji(age:int, status:str) -> str:
    if age and age < 25: return random.choice([" üôÇ", " üéâ", " üì±"])
    if "–°—Ç—É–¥–µ–Ω—Ç" in (status or ""): return " üìö"
    return ""

def make_push_and_why(product:str, name:str, gender:Optional[str], age:int, status:str, city:str,
                      topcats:List[str], benefit:int, reasons:List[str]) -> Dict[str, Any]:
    product = nfc(product); name = nfc(name); status = nfc(status); city = nfc(city)
    who = salutation(name, gender)
    b = fmt_kzt(benefit)
    cats = ", ".join([nfc(c) for c in topcats[:3]]) or "–≤–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    diag = "; ".join(reasons[:2]) if reasons else "–ø–æ –≤–∞—à–∏–º —Ç—Ä–∞—Ç–∞–º"
    emo = pick_emoji(age, status)

    seed = int(hashlib.md5(f"{name}{age}{product}{benefit}".encode("utf-8")).hexdigest(), 16)
    tpl = choose_template(product, seed)
    draft = tpl.format(who=who, b=b, cats=cats, diag=diag, emo=emo, city=city)

    profile = {
        "name": name,
        "gender": (gender or "").upper() or ("F" if who.startswith("–£–≤–∞–∂–∞–µ–º–∞—è") else "M"),
        "age": int(age or 0),
        "status": status,
        "city": city,
        "topcats": topcats,
        "benefit_kzt": benefit,
        "reasons": reasons,
        "product": product,
        "emoji_in_draft": bool(emo),
    }
    variant = seed % 7

    push_ai, tok1 = rewrite_push_tov(draft, profile, variant)
    why_ai,  tok2 = rewrite_why_tov(
        "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞: " + " ‚Ä¢ ".join(reasons[:3]) if reasons else "–ü–æ–¥—Ö–æ–¥–∏—Ç –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç—Ä–∞—Ç.", profile, variant
    )

    return {
        "push_before_ai": draft,
        "push_after_ai": push_ai,
        "why_after_ai": why_ai,
        "llm_tokens": tok1 + tok2,
    }
